Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-03-30T16:29:16+05:30

====== 4. DFS - Adjacency Matrix ======
Created Monday 30 March 2020

**Algorithm:**
We need to implement the graph, steps to perform:
1. We ask the user the number of vertices. We store this as n. Now we assume that the vertices are from 0 to n-1.
2. We ask for how many edges. The user inputs the edge pairs. We mark (a,b) and (b,a) as true for all inputs 'a' and 'b'.
3. We go through all vertices, calling DFS from it if they are absent from visited, at the same time checking if visited.size()<V. This ensures that **disconnected components are also taken into account.**

**Our graph is a simple graph - i.e no self loops, no weights, single bidirectional edges only between two nodes.**
--------------------
**Insights/Takeaways:**
* Here we need a visited array, this is very important. If not used we'll end in an infinite loop if our graph has even one cycle.
* DFS internally uses stack. And stacks may work using array, but it will still require us to pop/replace an element. And as we don't scan all the neighbours it may happen that we pop a neighbour and again take it in some other run. **So it is a must to have a visited array/map**.
* We note that we go to the depths until we reach a node where all neighbours are visited. Hence the name **Depth First **Search.

--------------------
**Efficiency**
T.C = O(V)** if we use hashmap as visited array.**
S.C = O(V) for a linked list.

--------------------
**Implementation tips**
* Use dynamic DSs.
[[../Codes/DFS.cpp|DFS code]]
--------------------
**Applications**
* Most problems are just variations of DFS and BFS.
