Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-03-31T01:11:39+05:30

====== 5. BFS ======
Created Tuesday 31 March 2020

This is also a traversal/search technique.

In constrast with DFS, here we first print all the neighbours. Then we explore them.
So we don't need to use a recursion. Better just print the neigbours like a tree.
1. We'll use a queue for this. We'll put the neighbours inside. When done, we'll pop the current node.
2. But when we see all neigbours after coming from the predeccessor, we can again put it in the queue. To avoid this, we use a visited array.
3. We go through all vertices, calling DFS from it if they are absent from visited, at the same time checking if visited.size()<V. This ensures that **disconnected components are also taken into account.**

--------------------
* Note that if we did not pop the queue but traversed it like an array. We would not require a visited array. We could scan the whole queue-array if we the node has already visited. **The queue is our **__to-be explored__ list.
* Note that a node may be on the right side but still be a neighbour of the current node.
* Also we cannot neglect the left side because it contains the predecessors. So **the whole queue-array is important and needs to be scanned. **Here space requirement is O(V). and Time requirement is O(V^{2}).
* All in all both using an queue-array and using a seperated visited are the same thing. We use a hashmap for added performance and easier code.
* If we use a hashmap for visited, our time complexity will be O(V).

--------------------
**Implementation tip**
In loops check if visited.size()==V, stop if it is.
* Use dynamic DSs.
[[../Codes/BFS.cpp|BFS.cpp]]
--------------------
**Applications**
* Most problems are just variations of DFS and BFS. These are the first principles for Graphs. 

