Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-01-11T16:37:38+05:30

====== Lecture 6 - Operator Overloading 1 - Binary ======
Created Saturday 11 January 2020

**Rationale:**
* f1+f2 can be written as f1.add(f2).
* This can be improvised to f1+f2. 
* Instead of Fraction add(const Fraction & t), write Fraction operator+(const Fraction &t). 
	Body is the same for both.
* Think this like, object1. [dot] is replaced by operator+ and + is basically the function name.
Notes: 
* **No space** should be present between **operator and symbol.**
* The whole expression is replaced by the return type.
* We can make the operator function as a const, if it does not change anything from the object or the 

In C++ we can overload some operators like +, -, [], -> etc. But we cannot overload any operators in it. Some of the operators cannot be overloaded. These operators are like below

1. [   .  ] Dot operator
2. [ ? :  ] Ternary operator
3. [  ::  ] Scope resolution operator
4. [  .*  ] Pointer to member operator
5. [sizeof] object size operator
6. [typeid] object type operator

These operators cannot be overloaded because if we overload them it will make serious programming issues.

For an example the sizeof operator returns the size of the object or datatype as an operand. This is evaluated by the compiler. It cannot be evaluated during runtime. So we cannot overload it.

Some examples:
	
	Fraction operator+(Fraction const &f2)
		{
			Fraction ret(*this);
			int lcm = denominator * f2.denominator;
			int x = lcm / denominator;
			int y = lcm / f2.denominator;
			ret.numerator = x * numerator + (y * f2.numerator);
			ret.denominator = lcm;
			ret.simplify();
			return ret;
		}
	Replace + by ==, -, *,/ . All these are binary functions.

