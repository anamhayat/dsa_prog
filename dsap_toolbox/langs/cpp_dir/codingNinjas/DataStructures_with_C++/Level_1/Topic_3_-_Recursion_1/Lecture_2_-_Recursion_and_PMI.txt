Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-12-28T10:40:48+05:30

====== Lecture 2 - Recursion and PMI ======
Created Saturday 28 December 2019

* Recursion is a very easy and intuitive way to solve problems, who iterative solution may be very tedious, may require programmers stack.
* It's a **pain **to think of recursion as a stack of activation records, and it's too slow. 
* We **won't **go into the **tracking detail **of the recursion(before writig the code), we are just not good at it.
* We will work on recursion using PMI(Principal of Mathematical Induction):
	Problem: Prove that P(x) is true for all x in N.
	Step 1: **Base Case **- F(x) is true for x = anchor point. Mostly F(0) or F(1) is true. [ //Done by observation ]// 
	Step 2: **Induction Hypothesis** - Assume that F(k) is true. [ This is your hypothesis, it cannot be challenged until the completion of the next step ]
	Step 3: **Induction Step **- Prove that F(k+1) is true. [  Just check that the extension is is sync with the hypothesis value, where we **can **use the hypothesis value for F(k)]
	If Step 3 holds then F(k) is true for all n.

	**Reason why it works: **1. We have a base. For a unit part of the ladder, we prove that the next unit is there. This is true for all units, since we used a variable 'k'. Definitely it is true for the base case. Hence the ladder can be progressed for any k in N.

* For any recursion problem, just solve the equivalent PMI of the problem and implement the code.
* Only after that do we make a **tree**. It is confusing to draw the tree before writing the code.
	Example: Using PMI for factorial.
	int factorial(int n)
	{
		if(n==0)
			return 1; 	// Base case
		else
		{
			int smallOutput = factorial(n-1); 	// Induction hypothesis: which is the function itself.
			int output = n * factorial(n-1); 	// this is where we put our hypothesis(i.e assumed solution).
			return output;
		}
	}
	* We can optimize step 2 and 3 in code. But it is always better to write them seperately first. Then mix them acc to the rules of programming.
	* Order of the recursive call does matter, it can be a head recursion or a tail recursion.

In a nutshell:
	1. Solve the problem using PMI(for the nth case, not extremes).
	2. Write the code.
	3. Dry run it using trees.
	4. Done !!
[[../recursionNotes1.pdf|Intro to Recursion Notes]]
